@page "/sudoku"
@inject IJSRuntime JSRuntime

<h1>Sudoku Game</h1>

<div class="row">
  <div class="col-3 text-center my-3">
    <svg @ref="gameRef" width="297" height="297" class="scale-up" style="margin-left: auto; margin-right: auto;" @onclick="OnClickGrid" @onkeypress="OnKeyPress" tabindex="0">
      <style>
        .background { fill: white; }
        .number { font-size: 16px; }
        .line { fill: transparent; stroke: black; stroke-width: 2; }
        .line-square { fill: transparent; stroke: black; stroke-width: 4; }
        .unselected-cell { fill: white; }
        .selected-cell { fill: aqua; }
      </style>
      
      <rect x="0" y="0" width="297" height="297" class="background" />

      @for(int row = 0; row < 9; row++)
      {
          for(int col = 0; col < 9; col++)
          {
              var rectClass = "unselected-cell";
              @if(selected is (int r, int c) && r == row && c == col)
              {
                  rectClass = "selected-cell";
              }

              <rect x="@(col * 33)" y="@(row * 33)" width="33" height="33" class="@rectClass" />

              <text>
                <text x="@(col * hCell + hOffset)" y="@(row * vCell + vOffset)" fill="black" class="number">
                  @(Game.GetCell(row + 1, col + 1) == 0 ? "" : Game.GetCell(row + 1, col + 1).ToString())
                </text>
              </text>
          }
      }

        <rect x="0" y="0" width="297" height="297" class="line-square" />
        <line x1="33" y1="0" x2="33" y2="297" class="line" /> 
        <line x1="66" y1="0" x2="66" y2="297" class="line" /> 
        <line x1="99" y1="0" x2="99" y2="297" class="line-square" /> 
        <line x1="132" y1="0" x2="132" y2="297" class="line" /> 
        <line x1="165" y1="0" x2="165" y2="297" class="line" /> 
        <line x1="198" y1="0" x2="198" y2="297" class="line-square" /> 
        <line x1="231" y1="0" x2="231" y2="297" class="line" /> 
        <line x1="264" y1="0" x2="264" y2="297" class="line" /> 
        <line x1="0" y1="33" x2="297" y2="33" class="line" /> 
        <line x1="0" y1="66" x2="297" y2="66" class="line" /> 
        <line x1="0" y1="99" x2="297" y2="99" class="line-square" /> 
        <line x1="0" y1="132" x2="297" y2="132" class="line" /> 
        <line x1="0" y1="165" x2="297" y2="165" class="line" /> 
        <line x1="0" y1="198" x2="297" y2="198" class="line-square" /> 
        <line x1="0" y1="231" x2="297" y2="231" class="line" /> 
        <line x1="0" y1="264" x2="297" y2="264" class="line" />

    </svg>
  </div>

</div>
<div class="row">
  <div class="col-3">
    <div class="alert @GetAlertClass()" role="alert">
      @GetAlertText()
    </div>
  </div>
</div>


@code {
    // Offsets to 'center' the digits in a cell
    private const int vOffset = 22;
    private const int hOffset = 14;

    // Standard increments for each cell
    private const int vCell = 33;
    private const int hCell = 33;

    private (int row, int col)? selected = null;

    protected ElementReference gameRef;  // set by the @ref attribute

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) 
        {
            await JSRuntime.InvokeVoidAsync("SetFocus", gameRef);
        }            
    }  

    private void OnKeyPress(KeyboardEventArgs keyboardEventArgs)
    {
        Console.WriteLine(keyboardEventArgs.Key);
        char key = keyboardEventArgs.Key[0];

        if (selected is (int r, int c) && Char.IsDigit(key))
        {
            selected = null;
            Game.SetCell(r + 1, c + 1, (int)Char.GetNumericValue(key));
        }
    }

    private void OnClickGrid(MouseEventArgs eventArgs)
    {
        Console.WriteLine($"{eventArgs.OffsetX},{eventArgs.OffsetY}");

        var col = (int)eventArgs.OffsetX / hCell;
        var row = (int)eventArgs.OffsetY / vCell;
        Console.WriteLine($"{row},{col}");
        SelectCell(row, col);
    } 

    private void SelectCell(int row, int col)
    {
        if (selected is (int r, int c))
        {
            selected = null;
        }
        else
        {
            selected = (row, col);
        }
    }

    private Sudoku Game { get; } = new Sudoku(PuzzleList.FirstPuzzle);

    private string GetAlertClass() => Game.Check() 
        ? Game.Completed() 
            ? "alert-success" 
            : "alert-primary" 
        : "alert-danger";
    
    private string GetAlertText() => Game.Check() 
        ? Game.Completed() 
            ? "You Win!"
            : "You have a valid Sudoku" 
        : "You have an error.";
}
